const express = require("express");
const Comment = require("../models/Comment");
const authMiddleware = require("../middleware/authMiddleware");

const router = express.Router();

// üìå –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–¥—É
router.post("/:threadId", authMiddleware, (req, res) => {
    const { content } = req.body;
    if (!content) {
        return res.status(400).json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" });
    }

    Comment.create(req.params.threadId, req.user.id, content, (err, commentId) => {
        if (err) {
            console.log(err);
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
        res.status(201).json({ id: commentId, thread_id: req.params.threadId, user_id: req.user.id, content });
    });
});

// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç—Ä–µ–¥—É
router.get("/:threadId", (req, res) => {
    Comment.getByThreadId(req.params.threadId, (err, comments) => {
        if (err) {
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
        res.json(comments);
    });
});

// üìå –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä)
router.put("/:commentId", authMiddleware, (req, res) => {
    const { content } = req.body;
    if (!content) {
        return res.status(400).json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" });
    }

    Comment.getById(req.params.commentId, (err, comment) => {
        if (err || !comment) return res.status(404).json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        if (comment.FK_users_id !== req.user.id) {
            return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
        }

        Comment.update(req.params.commentId, content, (err) => {
            if (err) return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
            res.json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω" });
        });
    });
});

// üìå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä)
router.delete("/:commentId", authMiddleware, (req, res) => {
    Comment.getById(req.params.commentId, (err, comment) => {
        if (err || !comment) return res.status(404).json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        if (comment.FK_users_id !== req.user.id) {
            return res.status(403).json({ message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
        }

        Comment.delete(req.params.commentId, (err) => {
            if (err) return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
            res.json({ message: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω" });
        });
    });
});

module.exports = router;
